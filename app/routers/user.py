from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton, PreCheckoutQuery
from sqlalchemy import text
from app.keyboards.shop import shop_list_kb, variant_buy_kb
from app.db import Session
from app.services.shop import ShopService
from app.config import settings
from app.keyboards.nav import back_to_menu_kb, with_back

# --------- –†–û–£–¢–ï–† –î–õ–Ø –ü–û–ö–£–ü–ê–¢–ï–õ–Ø (–≤–∏—Ç—Ä–∏–Ω–∞, crypto) ----------
user_router = Router(name="user")

def buy_keyboard(pay_url: str, invoice_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url)],
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"pay:check:{invoice_id}")],
        [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="menu:main")],
    ])

@user_router.callback_query(F.data == "user:shop")
async def shop_entry(cb: CallbackQuery):
    await shop_page(cb, 0)

PAGE_SIZE = 8

@user_router.callback_query(F.data == "user:orders")
async def user_orders(cb: CallbackQuery):
    # –ó–∞–≥–ª—É—à–∫–∞: —Å—é–¥–∞ –≤—ã–≤–µ–¥–µ—à—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await cb.message.edit_text("üì¶ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏ (—Å–∫–æ—Ä–æ –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫).", reply_markup=back_to_menu_kb())
    await cb.answer()

@user_router.callback_query(F.data.regexp(r"^user:shop:list:(\d)$"))
async def shop_list(cb: CallbackQuery):
    page = int(cb.data.rsplit(":",1)[1])
    await shop_page(cb, page)

async def shop_page(cb: CallbackQuery, page: int):
    off = page * PAGE_SIZE
    async with Session() as s:
        rows = (await s.execute(text("""
          select w.id, w.name, c.name as course_name, v.id as variant_id, 
                 v.price_regular, v.price_key
          from works w
          join variants v on v.work_id = w.id
          join courses c on c.id = w.course_id
          where w.status = 'ready'
          order by w.updated_at desc
          limit :lim offset :off
        """), {"lim": PAGE_SIZE, "off": off})).mappings().all()
        total = (await s.execute(text("select count(*) from works where status='ready'"))).scalar_one()
    if not rows:
        await cb.message.edit_text("–ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö —Ä–∞–±–æ—Ç.")
        return await cb.answer()

    lines = []
    for r in rows:
        lines.append(
            f"#{r['id']} ‚Ä¢ {r['course_name']} ‚Äî {r['name']}  "
            f"[–ì–æ—Ç–æ–≤–∞—è: {r['price_regular'] or '‚Äî'} | –ü–æ–¥ –∫–ª—é—á: {r['price_key'] or '‚Äî'}]\n"
            f"/open_{r['variant_id']}"
        )
    text_out = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:\n\n" + "\n".join(lines)
    has_next = (off + PAGE_SIZE) < total
    await cb.message.edit_text(text_out, reply_markup=shop_list_kb(page, page>0, has_next))
    await cb.answer()

@user_router.message(F.text.regexp(r"^/open_(\d+)$"))
async def open_variant(msg: Message):
    var_id = int(msg.text.split("_")[1])
    async with Session() as s:
        r = (await s.execute(text("""
          select v.id, v.price_regular, v.price_key, w.name, c.name as course_name
          from variants v 
          join works w on w.id = v.work_id
          join courses c on c.id = w.course_id
          where v.id = :v
        """), {"v": var_id})).mappings().one()
    txt = (f"–í–∞—Ä–∏–∞–Ω—Ç #{r['id']} ‚Ä¢ {r['course_name']} ‚Äî {r['name']}\n"
           f"–ì–æ—Ç–æ–≤–∞—è: {r['price_regular'] or '‚Äî'} | –ü–æ–¥ –∫–ª—é—á: {r['price_key'] or '‚Äî'}")
    kb = variant_buy_kb(var_id, r["price_regular"] is not None, r["price_key"] is not None)
    await msg.answer(txt, reply_markup=with_back(kb))

# –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ CRYPTO
@user_router.callback_query(F.data.regexp(r"^user:buy:(ready|key):(\d+)$"))
async def buy_by_button(cb: CallbackQuery):
    kind, var_id = cb.data.split(":")[2], int(cb.data.split(":")[3])
    async with Session() as s:
        svc = ShopService(s)
        pid, pay_url, invoice_id, price = await svc.create_purchase_with_invoice(
            buyer_id=cb.from_user.id, variant_id=var_id, kind=kind, currency="USDT"
        )
    await cb.message.edit_text(
        f"–°—á—ë—Ç –Ω–∞ {price} ({'–≥–æ—Ç–æ–≤–∞—è' if kind=='ready' else '–ø–æ–¥ –∫–ª—é—á'}). "
        f"–û–ø–ª–∞—Ç–∏—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª.",
        reply_markup=buy_keyboard(pay_url, invoice_id)
    )
    await cb.answer()

@user_router.callback_query(F.data.startswith("pay:check:"))
async def pay_check(cb: CallbackQuery, bot):
    invoice_id = int(cb.data.split(":")[2])
    async with Session() as s:
        ok, status, info = await ShopService(s).check_and_settle(invoice_id)

    if not ok:
        await cb.message.edit_text(f"–°—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞: {status}", reply_markup=back_to_menu_kb())
        return await cb.answer()

    # –æ–ø–ª–∞—á–µ–Ω
    if info and info["kind"] == "ready":
        # –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–¥–∞—Ç—å —Ñ–∞–π–ª —Å—Ä–∞–∑—É
        async with Session() as s:
            svc = ShopService(s)
            asset = await svc.get_ready_asset_for_variant(info["variant_id"])
        if asset:
            await bot.send_document(info["buyer_id"], asset["tg_file_id"], caption=asset.get("file_name") or "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
            await cb.message.edit_text("‚úÖ –û–ø–ª–∞—á–µ–Ω–æ! –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=back_to_menu_kb())
        else:
            await cb.message.edit_text("‚úÖ –û–ø–ª–∞—á–µ–Ω–æ! –ù–æ —Ñ–∞–π–ª –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω. –ú—ã –ø—Ä–∏—à–ª—ë–º –µ–≥–æ –ø–æ–∑–∂–µ.", reply_markup=back_to_menu_kb())
    else:
        # –ø–æ–¥ –∫–ª—é—á ‚Äî —Ä–∞–±–æ—Ç–∞ —É—à–ª–∞ –≤ –ø—É–ª
        await cb.message.edit_text("‚úÖ –û–ø–ª–∞—á–µ–Ω–æ! –†–∞–±–æ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ. –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ ‚Äî –ø—Ä–∏—à–ª—ë–º —Ñ–∞–π–ª.", reply_markup=back_to_menu_kb())
    await cb.answer()


# --------- –†–û–£–¢–ï–† –î–õ–Ø TELEGRAM PAYMENTS (RUB) ----------
tgpay_router = Router(name="user_tgpay")

@tgpay_router.callback_query(F.data.regexp(r"^user:buy_tg:(ready|key):(\d+)$"))
async def buy_tg(cb: CallbackQuery, bot):
    kind, variant_id = cb.data.split(":")[2], int(cb.data.split(":")[3])
    async with Session() as s:
        svc = ShopService(s)
        try:
            await svc.create_purchase_tg_invoice(
                bot=bot,
                chat_id=cb.message.chat.id,
                buyer_id=cb.from_user.id,
                variant_id=variant_id,
                kind=kind
            )
        except ValueError as e:
            await cb.answer(str(e), show_alert=True); return
    await cb.answer()

@tgpay_router.pre_checkout_query()
async def on_pre_checkout(pcq: PreCheckoutQuery, bot):
    await bot.answer_pre_checkout_query(pcq.id, ok=True)

@tgpay_router.message(F.successful_payment)
async def on_success_payment(msg: Message, bot):
    purchase_id = msg.successful_payment.invoice_payload
    tg_charge = msg.successful_payment.telegram_payment_charge_id
    provider_charge = msg.successful_payment.provider_payment_charge_id
    amount_rub = msg.successful_payment.total_amount / 100

    async with Session() as s:
        # –ø–æ–º–µ—á–∞–µ–º payment
        await s.execute(text("""
          update payments set status='paid', telegram_charge_id=:tgc, provider_payment_charge_id=:pcg,
                 currency='RUB', amount=:amt, updated_at=now()
           where purchase_id=:pid::uuid and provider='telegram'
        """), {"tgc": tg_charge, "pcg": provider_charge, "amt": amount_rub, "pid": purchase_id})

        # —á–∏—Ç–∞–µ–º –ø–æ–∫—É–ø–∫—É
        br = (await s.execute(text("""
            select p.buyer_id, p.variant_id, p.kind, p.status
              from purchases p where p.id=:id::uuid for update
        """), {"id": purchase_id})).first()
        if not br:
            return await msg.answer("‚ö†Ô∏è –ü–æ–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        buyer_id, variant_id, kind, pstatus = br

        # –∞–≤—Ç–æ—Ä
        author_id = (await s.execute(text("""
            select w.author from variants v join works w on w.id = v.work_id
             where v.id = :v
        """), {"v": variant_id})).scalar_one()

        # —Å—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–∫–∏
        new_status = "paid" if kind == "ready" else "in_progress"
        await s.execute(text("""
          update purchases set price=:p, status=:st, updated_at=now() where id=:id::uuid
        """), {"p": amount_rub, "st": new_status, "id": purchase_id})

        # 70/30
        author_share = 0.0 if buyer_id == author_id else round(float(amount_rub) * 0.70, 2)
        platform_share = round(float(amount_rub) - author_share, 2)
        await s.execute(text("update users set balance = balance + :x where tg_id=:u"),
                        {"x": author_share, "u": author_id})
        await s.execute(text("update users set balance = balance + :x where tg_id=:u"),
                        {"x": platform_share, "u": settings.PLATFORM_USER_ID})

        # –µ—Å–ª–∏ –ø–æ–¥ –∫–ª—é—á ‚Äî –æ—Ç–º–µ—Ç–∏–º —Ä–∞–±–æ—Ç—É ¬´–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ¬ª
        if kind == "key":
            await s.execute(text("""
              update works set status='in_progress', updated_at=now()
               where id = (select work_id from variants where id=:v)
            """), {"v": variant_id})

        await s.commit()

    # –≤—ã–¥–∞—á–∞ —Ñ–∞–π–ª–∞ –ø—Ä–∏ "–≥–æ—Ç–æ–≤–æ–π"
    if kind == "ready":
        async with Session() as s:
            svc = ShopService(s)
            asset = await svc.get_ready_asset_for_variant(variant_id)
        if asset:
            await bot.send_document(buyer_id, asset["tg_file_id"], caption=asset.get("file_name") or "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
            await msg.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        else:
            await msg.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –§–∞–π–ª –µ—â—ë –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω, –º—ã –ø—Ä–∏—à–ª—ë–º –µ–≥–æ –ø–æ–∑–∂–µ.")
    else:
        await msg.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –†–∞–±–æ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")
