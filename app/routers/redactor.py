from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from sqlalchemy import text

from app.middlewares.roles import Requires, MissingRole
from app.db import Session
from app.keyboards.nav import back_to_menu_kb
from app.keyboards.menu import main_menu

router = Router(name="redactor")

# ---------- FSM –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–±–æ—Ç—ã ----------
class UploadFSM(StatesGroup):
    course = State()
    name = State()
    description = State()
    prices = State()

def cancel_hint() -> str:
    return "\n\n–û—Ç–º–µ–Ω–∞: /cancel"

@router.message(F.text == "/cancel")
async def cancel_any(msg: Message, state: FSMContext, roles: set[str] | None = None):
    await state.clear()
    await msg.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu(roles or {"user"}))

# –ì–µ–π—Ç –Ω–∞ ¬´–Ω–µ—Ç –ø—Ä–∞–≤¬ª (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏–ª–æ –ø–æ 10 —Ä–∞–∑)
@router.callback_query(MissingRole("redactor"), F.data.regexp(r"^red:"))
async def red_gate(cb: CallbackQuery):
    await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)

@router.callback_query(Requires("redactor"), F.data == "red:upload")
async def start_upload(cb: CallbackQuery, state: FSMContext):
    await state.set_state(UploadFSM.course)
    await cb.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å (–≤–≤–µ–¥–∏ **ID –∫—É—Ä—Å–∞**)."
        "\n–ù–∞–ø—Ä–∏–º–µ—Ä: `1`"
        f"{cancel_hint()}",
        parse_mode="Markdown",
        reply_markup=back_to_menu_kb()
    )
    await cb.answer()

@router.message(UploadFSM.course)
async def set_course(msg: Message, state: FSMContext):
    txt = (msg.text or "").strip()
    if not txt.isdigit():
        return await msg.answer("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ (ID –∫—É—Ä—Å–∞). –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.\n–ù–∞–ø—Ä–∏–º–µ—Ä: `1`" + cancel_hint(),
                                parse_mode="Markdown")
    course_id = int(txt)
    # –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∫—É—Ä—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    async with Session() as s:
        exists = (await s.execute(text("select 1 from courses where id=:c"), {"c": course_id})).first()
    if not exists:
        return await msg.answer(f"–ö—É—Ä—Å —Å ID `{course_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID." + cancel_hint(),
                                parse_mode="Markdown")

    await state.update_data(course_id=course_id)
    await state.set_state(UploadFSM.name)
    await msg.answer("–í–≤–µ–¥–∏ **–Ω–∞–∑–≤–∞–Ω–∏–µ** —Ä–∞–±–æ—Ç—ã:" + cancel_hint(), parse_mode="Markdown")

@router.message(UploadFSM.name)
async def set_name(msg: Message, state: FSMContext):
    name = (msg.text or "").strip()
    if not name:
        return await msg.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑." + cancel_hint())
    await state.update_data(name=name)
    await state.set_state(UploadFSM.description)
    await msg.answer("–û–ø–∏—à–∏ —Ä–∞–±–æ—Ç—É (–∫—Ä–∞—Ç–∫–æ):" + cancel_hint())

@router.message(UploadFSM.description)
async def set_desc(msg: Message, state: FSMContext):
    desc = (msg.text or "").strip()
    await state.update_data(description=desc)
    await state.set_state(UploadFSM.prices)
    await msg.answer(
        "–í–≤–µ–¥–∏ —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: `<–≥–æ—Ç–æ–≤–∞—è> <–ø–æ–¥_–∫–ª—é—á>`.\n"
        "–ï—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç ‚Äî –ø–æ—Å—Ç–∞–≤—å `-`.\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ `1990 4990`\n"
        "‚Ä¢ `- 4990`\n"
        "‚Ä¢ `1990 -`\n" + cancel_hint(),
        parse_mode="Markdown"
    )

def _parse_price(token: str | None):
    token = (token or "").strip()
    if token in {"", "-"}:
        return None
    try:
        return float(token.replace(",", "."))
    except ValueError:
        return "bad"  # –º–∞—Ä–∫–µ—Ä –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞

@router.message(UploadFSM.prices)
async def set_prices(msg: Message, state: FSMContext):
    parts = (msg.text or "").split()
    ready_s = parts[0] if len(parts) > 0 else ""
    key_s   = parts[1] if len(parts) > 1 else ""

    price_ready = _parse_price(ready_s)
    price_key   = _parse_price(key_s)
    if price_ready == "bad" or price_key == "bad":
        return await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: `1990 4990` –∏–ª–∏ `- 4990`." + cancel_hint(),
                                parse_mode="Markdown")

    data = await state.get_data()
    async with Session() as s:
        # –µ—â—ë —Ä–∞–∑ –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è, —á—Ç–æ –∫—É—Ä—Å –∂–∏–≤
        exists = (await s.execute(text("select 1 from courses where id=:c"), {"c": data["course_id"]})).first()
        if not exists:
            return await msg.answer(f"–ö—É—Ä—Å —Å ID `{data['course_id']}` –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID." + cancel_hint(),
                                    parse_mode="Markdown")

        q = text("""
            insert into works(course_id, name, description, status, author)
            values (:c,:n,:d,'not_in_progress',:a) returning id
        """)
        wid = (await s.execute(q, {
            "c": data["course_id"], "n": data["name"], "d": data["description"], "a": msg.from_user.id
        })).scalar_one()
        await s.execute(text("""
            insert into variants(work_id, price_key, price_regular)
            values (:w,:pk,:pr)
        """), {"w": wid, "pk": price_key, "pr": price_ready})
        await s.commit()

    await state.clear()
    await msg.answer(
        f"‚úÖ –†–∞–±–æ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (ID: {wid}). –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é/—É—Å—Ç–∞–Ω–æ–≤–∫—É —Ü–µ–Ω –∞–¥–º–∏–Ω–æ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.",
        reply_markup=back_to_menu_kb()
    )

def wallet_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data="red:wdr:start")],
        [InlineKeyboardButton(text="–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥", callback_data="red:wdr:list")],
        [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="menu:main")],
    ])

@router.callback_query(Requires("redactor"), F.data=="red:wallet")
async def wallet(cb: CallbackQuery):
    from app.repositories.users import UsersRepo
    async with Session() as s:
        bal = await UsersRepo(s).get_balance(cb.from_user.id)
    await cb.message.edit_text(f"–ë–∞–ª–∞–Ω—Å: {bal:.2f}", reply_markup=wallet_menu())
    await cb.answer()

# ====== –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ) ======
class WithdrawFSM(StatesGroup):
    amount = State()
    method = State()
    requisites = State()

@router.callback_query(Requires("redactor"), F.data=="red:wdr:start")
async def wdr_start(cb: CallbackQuery, state: FSMContext):
    await state.set_state(WithdrawFSM.amount)
    await cb.message.edit_text("–°–∫–æ–ª—å–∫–æ –≤—ã–≤–µ—Å—Ç–∏? (—á–∏—Å–ª–æ)" + cancel_hint(), reply_markup=back_to_menu_kb())
    await cb.answer()

@router.message(WithdrawFSM.amount)
async def wdr_amount(msg: Message, state: FSMContext):
    try:
        amt = float((msg.text or "").replace(",", "."))
    except ValueError:
        return await msg.answer("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑." + cancel_hint())
    await state.update_data(amount=amt)
    await state.set_state(WithdrawFSM.method)
    await msg.answer("–ú–µ—Ç–æ–¥: `cryptobot` / `sbp` / `manual`" + cancel_hint(), parse_mode="Markdown")

@router.message(WithdrawFSM.method)
async def wdr_method(msg: Message, state: FSMContext):
    m = (msg.text or "").strip().lower()
    if m not in {"cryptobot", "sbp", "manual"}:
        return await msg.answer("–ú–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: `cryptobot` / `sbp` / `manual`." + cancel_hint(),
                                parse_mode="Markdown")
    await state.update_data(method=m)
    await state.set_state(WithdrawFSM.requisites)
    await msg.answer("–†–µ–∫–≤–∏–∑–∏—Ç—ã (TON-–∫–æ—à–µ–ª—ë–∫ / —Ç–µ–ª–µ—Ñ–æ–Ω –°–ë–ü / –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π):" + cancel_hint())

@router.message(WithdrawFSM.requisites)
async def wdr_finish(msg: Message, state: FSMContext):
    data = await state.get_data()
    async with Session() as s:
        await s.execute(text("""
        insert into withdrawals(user_id, amount, method, requisites, status)
        values (:u, :a, :m, :r::jsonb, 'requested')
        """), {"u": msg.from_user.id, "a": data["amount"], "m": data["method"], "r": {"value": msg.text}})
        await s.commit()
    await state.clear()
    await msg.answer("‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞. –ê–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤—ã–ø–ª–∞—Ç—É.", reply_markup=back_to_menu_kb())

@router.callback_query(Requires("redactor"), F.data=="red:works")
async def list_my_works(cb: CallbackQuery):
    async with Session() as s:
        rows = (await s.execute(text("""
          select w.id, w.name, w.status, c.name as course_name
          from works w
          join courses c on c.id = w.course_id
          where w.author = :u
          order by w.updated_at desc limit 20
        """), {"u": cb.from_user.id})).mappings().all()
    if not rows:
        await cb.message.edit_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞–±–æ—Ç.", reply_markup=back_to_menu_kb())
    else:
        text_out = "–¢–≤–æ–∏ —Ä–∞–±–æ—Ç—ã:\n\n" + "\n".join(
            f"#{r['id']} ‚Ä¢ {r['course_name']} ‚Äî {r['name']} ‚Ä¢ {r['status']}" for r in rows
        )
        await cb.message.edit_text(text_out, reply_markup=back_to_menu_kb())
    await cb.answer()
